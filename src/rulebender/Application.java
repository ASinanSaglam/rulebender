package rulebender;


import java.net.URL;
import java.util.prefs.Preferences;

import org.eclipse.core.runtime.Platform;
import org.eclipse.equinox.app.IApplication;
import org.eclipse.equinox.app.IApplicationContext;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.window.Window;
import org.eclipse.osgi.service.datalocation.Location;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.PlatformUI;

import rulebender.core.workspace.PickWorkspaceDialog;
import rulebender.preferences.PreferencesClerk;
import rulebender.prereq.PreReqChecker;
import rulebender.logging.Logger;

/**
 * This class was generated by Eclipse when the rulebender plugin was created
 *  and it controls all aspects of the application's execution.  The only thing that
 *  has been altered here is how the workspace is managed.  
 *  
 *  See /rulebender/src/rulebender/core/workspace/PickWorkspaceDialog.java
 *  
 */
public class Application implements IApplication {

    private static Preferences  _preferences           = Preferences.userNodeForPackage(Application.class);

    private static final String _RawInstallDirectory = "rawInstallDirectory";
    private static final String _KeyInstallDirectory = "keyInstallDirectory";

	/* (non-Javadoc)
	 * @see org.eclipse.equinox.app.IApplication#start(org.eclipse.equinox.app.IApplicationContext)
	 */
	public Object start(IApplicationContext context) 
	{
		// This is an internal flag, which should only be true if it has been
		// set to true during the run.  There may be some error paths that allow
		// RuleBender to exit without first setting this to false, so here's a
		// safety net that makes sure it is set to false on entry.
        PickWorkspaceDialog.willCleanWorkspace(false);
		
		// This is how to change the name in the title bar of the application.  
		// There may be a better way to do it, but this worked.  
		Display.setAppName("RuleBender");
	 	
	    // the old Eclipse generated code 
        Display display = PlatformUI.createDisplay(); 

        // Set command prompt output at a minimum.
        Activator.getDefault().getPreferenceStore().setValue("OUTPUT_SETTING","minimal");
        // Set maximum graph density at a reasonable level.
        Activator.getDefault().getPreferenceStore().setValue("MAX_GRAPH_COLUMNS","10000");

        

        PutExecutionPath();

        
        // Get the workspace and only continue if it is set correctly.
        
	    if(!selectWorkspace(display))
	    {
	    	System.exit(0); 
            return IApplication.EXIT_OK; 
	    }
	    
	    
        
	    // Default.  Do not touch.
		try {
			int returnCode = PlatformUI.createAndRunWorkbench(display, new ApplicationWorkbenchAdvisor());
			if (returnCode == PlatformUI.RETURN_RESTART) {
				Logger.log(Logger.LOG_LEVELS.INFO, this.getClass(), " Initiating a restart ");
				Logger.log(Logger.LOG_LEVELS.INFO, this.getClass(), "\n\n\n------------------------------------------------------ ");
				return IApplication.EXIT_RESTART;
			}
			return IApplication.EXIT_OK;
		} catch(ClassCastException cce) {
			return IApplication.EXIT_OK;
	    } finally {
			// This seems like the best place to copy the name of the BioNetGen directory
			// from the PreferencesClerk database into the _preferences database.
			String mm = PickWorkspaceDialog.setLastSetBioNetGenDirectory(PreferencesClerk.getUserBNGPath());
			display.dispose();


		}
		
	}

	/* (non-Javadoc)
	 * @see org.eclipse.equinox.app.IApplication#stop()
	 */
	public void stop() {
		
		if (!PlatformUI.isWorkbenchRunning())
			return;
		final IWorkbench workbench = PlatformUI.getWorkbench();
		final Display display = workbench.getDisplay();
		display.syncExec(new Runnable() {
			public void run() {
				if (!display.isDisposed())
					workbench.close();
			}
		});
	}
	
	private boolean selectWorkspace(Display display)
	{		
        // fetch the Location that we will be modifying 
	    Location instanceLoc = Platform.getInstanceLocation(); 
	    // get what the user last said about remembering the workspace location 
	    boolean remember = PickWorkspaceDialog.isRememberWorkspace();

	    
		try { 
	        // get the last used workspace location 
	        String lastUsedWs = PickWorkspaceDialog.getLastSetWorkspaceDirectory(); 
	 
	        // Are we restarting from a switched workspace?
	        if(PickWorkspaceDialog.didSwitchRestart())
		    {
	        	// Set remember to true no matter what. 
	        	remember = true;
		    }
	        
	        // if we have a "remember" but no last used workspace, it's not much to remember 
	        if (remember && (lastUsedWs == null || lastUsedWs.length() == 0)) 
	        { 
	            remember = false; 
	        } 
	 
	        // check to ensure the workspace location is still OK 
	        if (remember) 
	        { 
	            // if there's any problem whatsoever with the workspace, force a dialog which in its turn will tell them what's bad 
	            String ret = PickWorkspaceDialog.checkWorkspaceDirectory(Display.getDefault().getActiveShell(), lastUsedWs, false, false); 
	    	    
	            if (ret != null) 
	            { 
	            	remember = false; 
	            } 
	 
	        } 

	        
	        // if we don't remember the workspace, show the dialog 
	        if (!remember) { 
	            PickWorkspaceDialog pwd = new PickWorkspaceDialog(false, null); 
	            int pick = pwd.open(); 
	 
	            // if the user cancelled, we can't do anything as we need a workspace, so in this case, we tell them and exit 
	            if (pick == Window.CANCEL) { 
	            if (pwd.getSelectedWorkspaceLocation()  == null) { 
	                MessageDialog.openError(display.getActiveShell(), "Error", 
	                    "The application can not start without a workspace root and will now exit."); 
	               return false;
	            } 
	            } 
	            else { 
	            // tell Eclipse what the selected location was and continue 
	            instanceLoc.set(new URL("file", null, pwd.getSelectedWorkspaceLocation()), false); 
	            //  The dialog for picking the workspace will not be shown, so copy the path to BioNetGen.
				Activator.getDefault().getPreferenceStore().setDefault("SIM_PATH",PickWorkspaceDialog.getLastSetBioNetGenDirectory());
	            } 
	        } 
	        else { 
	            // set the last used location and continue 
	            instanceLoc.set(new URL("file", null, lastUsedWs), false);
	            //  The dialog for picking the workspace will not be shown, so copy the path to BioNetGen.
				Activator.getDefault().getPreferenceStore().setDefault("SIM_PATH",PickWorkspaceDialog.getLastSetBioNetGenDirectory());
	        }   
	    } 
	    catch (Exception err) 
	    { 
		    Logger.log(Logger.LOG_LEVELS.INFO, this.getClass(), "There was an error during the selection of the workspace.");	       
		    Logger.log(Logger.LOG_LEVELS.INFO, this.getClass(), "RuleBender will now exit.");	       
            return false;
	    }
       
		
		return true; 
	}
	
	
    static public String GetExecutionPath() {
        return _preferences.get(_KeyInstallDirectory, null);
    }

    
	   
    public String PutExecutionPath(){
    	  
    	String absolutePath = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
//      System.out.println(" absolutePath = " + absolutePath);
        _preferences.put(_RawInstallDirectory, absolutePath);    	
//        absolutePath = absolutePath.substring(0, absolutePath.lastIndexOf(System.getProperty("plugin")));
        absolutePath = absolutePath.substring(0, absolutePath.lastIndexOf("plugin"));
//    	System.out.println(" absolutePath = " + absolutePath);
        _preferences.put(_KeyInstallDirectory, absolutePath);
        return absolutePath;
    }    

}
